-- JOINS -- RETRIEVING DATA FROM MULTIPLE TABLE AT A TIME
-- non- ansi join
               -- EQUI-JOIN
               -- NON EQUI-JOIN
               -- SELF JOIN
-- NON ANSI JOIN IS THE JOIN WE CAN USE WITH 'WHERE' CONDITION THEN JOINING CONDITION
-- ANSI JOIN IS THE JOIN WE CAN USE WITH 'ON' CONDITION THEN JOINING CONDITION

-- EQUI JOIN
      -- EXCEPT = SYMBOL WE CANNOT USE ANY  OTHER SYMBOL IN EQUI-JOIN
      -- ONLY ALLOWED OPERTORS ARE =
      -- NOT ALLOWED OPERATORS ARE < > <= >= <> 
      -- RETRIEVE DATA FROM MULTIPLE TABLES BASED ON EQUALITY CONDITION (=)


-- NON-EQUI-JOIN 
          -- WE CAN USE ANY OPERATORS EXCEPT = OPERATOR
          -- RETRIEVE DATA FROM MULTIPLE TABLES BASED ON ANY CONDITION
          -- WE CAN USE ANY OPERATORS LIKE 
                 -- = <  > <> !=  BETWEEN LIKE IN NOT IN AND OR LIKE LIMIT OFFSET ...ETC.,
                 
                 
USE SQL_FULL;                 
CREATE TABLE ONES(SNO INT NOT NULL,FULL_NAME VARCHAR(40));
CREATE TABLE TWO(SNO INT NOT NULL,FULL_NAME VARCHAR(45));

INSERT INTO ONES (SNO,FULL_NAME) VALUES(100,'KAVIYA'),(200,'GEETHA'),
(300,'RAM'),(400,'SEETHA');


INSERT INTO TWO(SNO,FULL_NAME) VALUES (100,'JOHN'),(300,'KIRAN');

INSERT INTO TWO VALUES(500,'HANUMAN');


SELECT * FROM ONES;
SELECT * FROM TWO;

-- EQUI-JOIN
SELECT * FROM ONES ,TWO WHERE ONES.SNO = TWO.SNO;

-- NON-EQUI JOIN
SELECT * FROM ONES,TWO WHERE ONES.SNO > TWO.SNO;
SELECT * FROM ONES,TWO WHERE ONES.SNO <TWO.SNO;
SELECT * FROM ONES,TWO WHERE ONES.SNO != TWO.SNO;
SELECT * FROM ONES,TWO WHERE  ONES.SNO BETWEEN 100 AND 190;

-- SELF JOIN
              -- JOINING A TABLE DATA BY ITSELF IS CALLED AS SELF JOIN
              -- MUST IMPLEMENTED WITH ALIAS NAME OF THE TABLES
              -- WE CAN PERFORM IN SINGLE TABLE IN SELF JOIN
              -- SELF MECHANISM CAN BE IMPLEMENTED IN SINGLE TABLE ONLY

-- WHENEVER WE COMPARE COLUMN VALUES WITHIN SAME TABLE WE CAN USE 
-- IN THIS CASE
-- ANY NO OF ALIASES IN SINGLE TABLE THAT IS ACCEPTED
-- ALIAS  TEMPORARYLY DATA IS STORED



-- ALIAS
             -- INTERNALLY IT MAINTAINED ONE TEMPORARY OR COPY TABLE
             -- ON THAT TABLE  
             -- FOR EACH ALIAS IT CREATE ONE TEMPORARY COPY OF THE TABLE
             
             
USE SQL_FULL;
DROP TABLE EMPLOYEE;
CREATE TABLE EMPLOYEE
(
EID INT NOT NULL,
EMPNAME VARCHAR(20),
SALARY DECIMAL(8,2),
MANAGERID INT 
);

INSERT INTO EMPLOYEE 
VALUES(110,'FARITHA',450000,907), 
(101,'KAVIYA',450000,900),
(102,'GEETHA',500000,905),
(103,'RAM',369000,908),
(104,'SEETHA',30900,1000);

SELECT * FROM EMPLOYEE;

-- IF WE KNOW THE SALARY BEFORE THEN WE CAN USE THIS METHOD
SELECT  * FROM EMPLOYEE WHERE SALARY=450000;


-- IF WE DON'T  KNOW THE SALARY IN THAT CASE WE CAN USE SELF JOIN
SELECT * FROM EMPLOYEE 
WHERE EMPNAME ='KAVIYA';

SELECT * FROM EMPLOYEE 
WHERE SALARY = SALARY;

SELECT * FROM EMPLOYEE AS E1,EMPLOYEE E2
WHERE E1.SALARY = E2.SALARY;

SELECT E2.EID,E2.EMPNAME,E2.SALARY,E2.MANAGERID 
FROM EMPLOYEE E1 ,EMPLOYEE E2
WHERE E1.SALARY = E2.SALARY
AND E1.EMPNAME ='KAVIYA';

